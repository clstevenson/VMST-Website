const connection = require("../config/connection");
require("dotenv").config();

// Membership Data as of 04/28/24 (with emails replaced)
const { Member, User, Competitor, Post } = require("../models");

connection.on("error", (err) => err);

// hide the membership coordinator and webmaster initial passwords
const membershipPassword = process.env.MEMERSHIP_PWD;
const webmasterPassword = process.env.WEBMASTER_PWD;

/**
 * Function to seed the USMS members collection with VA LMSC members
 * In production this will be done by the membership coordinator by uploading
 * a data file (eg as a CSV) but for now we'll use the supplied JSON (which has fake emails)
 **/
const seedMembers = async () => {
  // used an altered CSV and https://codebeautify.org/excel-to-json to produce the data
  const memberData = require("./members.json");

  // delete the members collection if it exists
  let membersCheck = await connection.db
    .listCollections({ name: "members" })
    .toArray();
  if (membersCheck.length) {
    await connection.dropCollection("members");
  }

  const lmscMembers = memberData.map((member) => {
    if (member.emails) {
      // member may have two emails in one string
      member.emails = member.emails.split(", ");
    } else {
      // member may not have an email address, catch the error
      member.emails = [];
    }
    member.regYear = 2024;
    return member;
  });

  // add to the members collection
  return await Member.insertMany(lmscMembers);
};

/**
 * Function to seed the Users with 10 random USMS members
 * Added four leaders with real emails for email testing purposes in dev
 * Also added the real Membership Coordinator as a user to test that functionality in dev
 **/
const seedUsers = async (members) => {
  // if the users collection exists, delete it
  let usersCheck = await connection.db
    .listCollections({ name: "users" })
    .toArray();
  if (usersCheck.length) {
    await connection.dropCollection("users");
  }
  // randomly select 10 to be users
  const userData = [];
  for (let i = 0; i < 10; i++) {
    const randomIndex = Math.floor(Math.random() * members.length + 1);
    const { firstName, lastName, usmsId } = members[randomIndex];
    const obj = {
      firstName,
      lastName,
      usmsId,
      password: "password",
      // email is required and must be unique
      email: `email${i}@email.com`,
    };
    userData.push(obj);
  }
  // add four leaders for email testing
  userData.push({
    firstName: "Ian",
    lastName: "Stevenson",
    password: "password",
    email: "ianmstevenson1@gmail.com",
    role: "leader",
  });
  userData.push({
    firstName: "Leonidas",
    lastName: "Stevenson",
    password: "password",
    email: "cstevens@richmond.edu",
    role: "leader",
  });
  userData.push({
    firstName: "Chris",
    lastName: "Stevenson",
    password: "password",
    email: "chrislstevenson@yahoo.com",
    role: "coach",
    group: "RVCM",
  });
  userData.push({
    firstName: "Michael",
    lastName: "Stevenson",
    password: "password",
    email: "junodog2@gmail.com",
    role: "leader",
  });
  // add membership coordinator for membership CSV upload
  userData.push({
    firstName: "Christopher",
    lastName: "Stevenson",
    password: membershipPassword,
    email: "VAMembership@usms.org",
    role: "membership",
  });
  // add webmaster
  userData.push({
    firstName: "Chris",
    lastName: "Stevenson",
    password: webmasterPassword,
    email: "chrislstevenson@gmail.com",
    notifications: true,
    role: "webmaster",
  });

  // now add to the users collection
  return await User.create(userData);
};

/**
 * Function to seed posts and comments/reactions to those posts. These sample posts were
 * generated by ChatGPT and are meant to be swimming-specific. The comments are short and generic,
 * and were also generated by ChatGPT. Posts can only be made by team leadership (maybe coaches?)
 * and are not attributed to specific users. Comments can only be made by users (including those
 * in other roles) and are attributed to specific users. Each post can (and usually should) hav
 * a decorative/banner photo.
 **/
const seedPosts = async () => {
  // get post and comment data
  const postData = require("./posts.json");
  const commentData = require("./comments");
  // get an array of user IDs for comment attribution
  const users = await User.find().select("_id");

  // URLs and captions of photos
  const postPhotos = require("./post-photos");

  // delete the posts collection if it exists
  let postsCheck = await connection.db
    .listCollections({ name: "posts" })
    .toArray();
  if (postsCheck.length) {
    await connection.dropCollection("posts");
  }

  // interate through each post:
  const posts = postData.map((post, index) => {
    // attach a random photo object to each
    // each photo object has properties id, url, and al
    const { id, url, flickrURL, caption } = postPhotos[index];
    post.photo = { id, url, flickrURL, caption };

    const commentArr = [];
    // randomly choose how many comments the post has (0-5 is the range)
    const numComments = Math.floor(Math.random() * 6);
    // for each of those comments, randomly choose it from the comments data array
    // (don't worry about choosing the same comment more than once)
    // also randomly choose a user who made the comment
    for (let i = 0; i < numComments; i++) {
      // randomly assign a user to post a comment
      let randomIndex = Math.floor(Math.random() * users.length);
      const id = users[randomIndex]._id;
      // randomly pick a comment to post
      randomIndex = Math.floor(Math.random() * commentData.length);
      commentArr.push({ content: commentData[randomIndex], user: id });
    }
    post.comments = commentArr;
    return post;
  });

  // add to the posts collection
  return await Post.insertMany(posts);
};

connection.once("open", async () => {
  console.log("Connected to DB");

  // seed the data from the VA members of the LMSC
  const members = await seedMembers();
  console.log(`${members.length} members added`);

  // seed Users data using some random USMS members
  const users = await seedUsers(members);
  console.log(`${users.length} users added`);

  // seed Posts using ChatGPT content
  const posts = await seedPosts();
  console.log(`${posts.length} posts added`);

  process.exit(0);
});
